// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bms_web_api.Data;

#nullable disable

namespace bms_web_api.Migrations
{
    [DbContext(typeof(MyDBContext))]
    partial class MyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("bms_web_api.Data.AuthorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("author_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("bms_web_api.Data.BookData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("author_id")
                        .HasColumnType("int");

                    b.Property<string>("book_des")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("book_image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<double>("book_price")
                        .HasColumnType("float");

                    b.Property<int>("book_quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("book_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<int>("num_pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("public_date")
                        .HasColumnType("date");

                    b.Property<int>("publisher_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("update_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("user_book")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.HasIndex("author_id");

                    b.HasIndex("category_id");

                    b.HasIndex("publisher_id");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("bms_web_api.Data.CategoryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("bms_web_api.Data.CustomerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("customer_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("customer_email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customer_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("customer_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("bms_web_api.Data.InventoryExportData", b =>
                {
                    b.Property<string>("iep_id")
                        .HasColumnType("varchar(7)");

                    b.Property<DateTime>("export_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("orderId")
                        .IsRequired()
                        .HasColumnType("varchar(7)");

                    b.HasKey("iep_id");

                    b.HasIndex("orderId");

                    b.ToTable("InventoryExports", (string)null);
                });

            modelBuilder.Entity("bms_web_api.Data.InventoryReceiptData", b =>
                {
                    b.Property<string>("irc_id")
                        .HasColumnType("varchar(7)");

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("book_quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("input_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<double>("totalPrice")
                        .HasColumnType("float");

                    b.HasKey("irc_id");

                    b.HasIndex("book_id");

                    b.ToTable("InventoryReceipts", (string)null);
                });

            modelBuilder.Entity("bms_web_api.Data.OrderData", b =>
                {
                    b.Property<string>("order_id")
                        .HasColumnType("varchar(7)");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("order_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("payment")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("receive_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("total_price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("order_id");

                    b.HasIndex("customer_id");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("bms_web_api.Data.OrderItemData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<double>("book_price")
                        .HasColumnType("float");

                    b.Property<string>("order_id")
                        .IsRequired()
                        .HasColumnType("varchar(7)");

                    b.Property<int>("quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("book_id");

                    b.HasIndex("order_id");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("bms_web_api.Data.PublisherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("publisher_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("publisher_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("publisher_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Publishers", (string)null);
                });

            modelBuilder.Entity("bms_web_api.Data.UserData", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"), 1L, 1);

                    b.Property<string>("emailConfirmation_Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isEmail_Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("login_Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime?>("resetToken_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("user_email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("verify_time")
                        .HasColumnType("datetime2");

                    b.HasKey("userId");

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("bms_web_api.Data.BookData", b =>
                {
                    b.HasOne("bms_web_api.Data.AuthorData", "Author")
                        .WithMany("BookDatas")
                        .HasForeignKey("author_id")
                        .IsRequired()
                        .HasConstraintName("FK_Books_Authors");

                    b.HasOne("bms_web_api.Data.CategoryData", "Category")
                        .WithMany("BookDatas")
                        .HasForeignKey("category_id")
                        .IsRequired()
                        .HasConstraintName("FK_Books_Categories");

                    b.HasOne("bms_web_api.Data.PublisherData", "Publisher")
                        .WithMany("BookDatas")
                        .HasForeignKey("publisher_id")
                        .IsRequired()
                        .HasConstraintName("FK_Books_Publishers");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("bms_web_api.Data.InventoryExportData", b =>
                {
                    b.HasOne("bms_web_api.Data.OrderData", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("bms_web_api.Data.InventoryReceiptData", b =>
                {
                    b.HasOne("bms_web_api.Data.BookData", "Book")
                        .WithMany("InventoryReceipts")
                        .HasForeignKey("book_id")
                        .IsRequired()
                        .HasConstraintName("FK_IRCs_Books");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("bms_web_api.Data.OrderData", b =>
                {
                    b.HasOne("bms_web_api.Data.CustomerData", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("customer_id")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("bms_web_api.Data.OrderItemData", b =>
                {
                    b.HasOne("bms_web_api.Data.BookData", "Book")
                        .WithMany("OrderItems")
                        .HasForeignKey("book_id")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Books");

                    b.HasOne("bms_web_api.Data.OrderData", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("order_id")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Orders");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("bms_web_api.Data.AuthorData", b =>
                {
                    b.Navigation("BookDatas");
                });

            modelBuilder.Entity("bms_web_api.Data.BookData", b =>
                {
                    b.Navigation("InventoryReceipts");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("bms_web_api.Data.CategoryData", b =>
                {
                    b.Navigation("BookDatas");
                });

            modelBuilder.Entity("bms_web_api.Data.CustomerData", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("bms_web_api.Data.OrderData", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("bms_web_api.Data.PublisherData", b =>
                {
                    b.Navigation("BookDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
